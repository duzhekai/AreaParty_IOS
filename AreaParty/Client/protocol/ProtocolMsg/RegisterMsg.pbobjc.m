// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "RegisterMsg.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegisterMsgRoot

@implementation RegisterMsgRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RegisterMsgRoot_FileDescriptor

static GPBFileDescriptor *RegisterMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RegisterReq

@implementation RegisterReq

@dynamic hasRequestCode, requestCode;
@dynamic hasUserId, userId;
@dynamic hasUserName, userName;
@dynamic hasUserPassword, userPassword;
@dynamic hasUserMobile, userMobile;
@dynamic hasUserMac, userMac;
@dynamic hasUserAddress, userAddress;
@dynamic hasUserStreet, userStreet;
@dynamic hasUserCommunity, userCommunity;
@dynamic hasRegisterCode, registerCode;

typedef struct RegisterReq__storage_ {
  uint32_t _has_storage_[1];
  RegisterReq_RequestCode requestCode;
  int32_t registerCode;
  NSString *userId;
  NSString *userName;
  NSString *userPassword;
  NSString *userMobile;
  NSString *userMac;
  NSString *userAddress;
  NSString *userStreet;
  NSString *userCommunity;
} RegisterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestCode",
        .dataTypeSpecific.enumDescFunc = RegisterReq_RequestCode_EnumDescriptor,
        .number = RegisterReq_FieldNumber_RequestCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, requestCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userPassword",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserPassword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMobile",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserMobile,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userMobile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMac",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserMac,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userAddress",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserAddress,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userStreet",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserStreet,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userCommunity",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_UserCommunity,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, userCommunity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "registerCode",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_RegisterCode,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, registerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterReq class]
                                     rootClass:[RegisterMsgRoot class]
                                          file:RegisterMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\013\000\002\006\000\003\010\000\004\014\000\005\n\000\006\007\000\007\013\000\010\n\000\t\r\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum RegisterReq_RequestCode

GPBEnumDescriptor *RegisterReq_RequestCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Checkuserid\000Checkmobile\000Register\000";
    static const int32_t values[] = {
        RegisterReq_RequestCode_Checkuserid,
        RegisterReq_RequestCode_Checkmobile,
        RegisterReq_RequestCode_Register,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RegisterReq_RequestCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RegisterReq_RequestCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RegisterReq_RequestCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case RegisterReq_RequestCode_Checkuserid:
    case RegisterReq_RequestCode_Checkmobile:
    case RegisterReq_RequestCode_Register:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RegisterRsp

@implementation RegisterRsp

@dynamic hasResultCode, resultCode;
@dynamic hasResultType, resultType;

typedef struct RegisterRsp__storage_ {
  uint32_t _has_storage_[1];
  RegisterRsp_ResultCode resultCode;
  RegisterRsp_ResultType resultType;
} RegisterRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = RegisterRsp_ResultCode_EnumDescriptor,
        .number = RegisterRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = RegisterRsp_ResultType_EnumDescriptor,
        .number = RegisterRsp_FieldNumber_ResultType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterRsp__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterRsp class]
                                     rootClass:[RegisterMsgRoot class]
                                          file:RegisterMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum RegisterRsp_ResultType

GPBEnumDescriptor *RegisterRsp_ResultType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Userid\000Mobile\000Register\000";
    static const int32_t values[] = {
        RegisterRsp_ResultType_Userid,
        RegisterRsp_ResultType_Mobile,
        RegisterRsp_ResultType_Register,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RegisterRsp_ResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RegisterRsp_ResultType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RegisterRsp_ResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RegisterRsp_ResultType_Userid:
    case RegisterRsp_ResultType_Mobile:
    case RegisterRsp_ResultType_Register:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RegisterRsp_ResultCode

GPBEnumDescriptor *RegisterRsp_ResultCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Exist\000Codewrong\000";
    static const int32_t values[] = {
        RegisterRsp_ResultCode_Success,
        RegisterRsp_ResultCode_Exist,
        RegisterRsp_ResultCode_Codewrong,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RegisterRsp_ResultCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RegisterRsp_ResultCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RegisterRsp_ResultCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case RegisterRsp_ResultCode_Success:
    case RegisterRsp_ResultCode_Exist:
    case RegisterRsp_ResultCode_Codewrong:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

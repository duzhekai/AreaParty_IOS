// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ChatData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChatDataRoot

@implementation ChatDataRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChatDataRoot_FileDescriptor

static GPBFileDescriptor *ChatDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ChatItem

@implementation ChatItem

@dynamic hasTargetType, targetType;
@dynamic hasSendUserId, sendUserId;
@dynamic hasFileDate, fileDate;
@dynamic hasFileName, fileName;
@dynamic hasFileSize, fileSize;
@dynamic hasReceiveUserId, receiveUserId;
@dynamic hasChatType, chatType;
@dynamic hasChatBody, chatBody;
@dynamic hasDate, date;
@dynamic hasChatId, chatId;

typedef struct ChatItem__storage_ {
  uint32_t _has_storage_[1];
  ChatItem_TargetType targetType;
  ChatItem_ChatType chatType;
  NSString *sendUserId;
  NSString *fileDate;
  NSString *fileName;
  NSString *fileSize;
  NSString *receiveUserId;
  NSString *chatBody;
  int64_t date;
  int64_t chatId;
} ChatItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetType",
        .dataTypeSpecific.enumDescFunc = ChatItem_TargetType_EnumDescriptor,
        .number = ChatItem_FieldNumber_TargetType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatItem__storage_, targetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendUserId",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_SendUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatItem__storage_, sendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileDate",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_FileDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatItem__storage_, fileDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_FileName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatItem__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_FileSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatItem__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiveUserId",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_ReceiveUserId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatItem__storage_, receiveUserId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = ChatItem_ChatType_EnumDescriptor,
        .number = ChatItem_FieldNumber_ChatType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatItem__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatBody",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_ChatBody,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatItem__storage_, chatBody),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_Date,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatItem__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.className = NULL,
        .number = ChatItem_FieldNumber_ChatId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatItem__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatItem class]
                                     rootClass:[ChatDataRoot class]
                                          file:ChatDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\n\000\002\n\000\003\010\000\004\010\000\005\010\000\006\r\000\007\010\000\010\010\000\n\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ChatItem_ChatType

GPBEnumDescriptor *ChatItem_ChatType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Text\000Image\000";
    static const int32_t values[] = {
        ChatItem_ChatType_Text,
        ChatItem_ChatType_Image,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatItem_ChatType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatItem_ChatType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatItem_ChatType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatItem_ChatType_Text:
    case ChatItem_ChatType_Image:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ChatItem_TargetType

GPBEnumDescriptor *ChatItem_TargetType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Individual\000Group\000System\000Download\000Agreedo"
        "wnload\000Disagreedownload\000Send\000Receive\000";
    static const int32_t values[] = {
        ChatItem_TargetType_Individual,
        ChatItem_TargetType_Group,
        ChatItem_TargetType_System,
        ChatItem_TargetType_Download,
        ChatItem_TargetType_Agreedownload,
        ChatItem_TargetType_Disagreedownload,
        ChatItem_TargetType_Send,
        ChatItem_TargetType_Receive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatItem_TargetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatItem_TargetType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatItem_TargetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatItem_TargetType_Individual:
    case ChatItem_TargetType_Group:
    case ChatItem_TargetType_System:
    case ChatItem_TargetType_Download:
    case ChatItem_TargetType_Agreedownload:
    case ChatItem_TargetType_Disagreedownload:
    case ChatItem_TargetType_Send:
    case ChatItem_TargetType_Receive:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

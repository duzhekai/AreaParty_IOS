// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChangeGroupMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ChangeGroupMsg.pbobjc.h"
 #import "GroupData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChangeGroupMsgRoot

@implementation ChangeGroupMsgRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChangeGroupMsgRoot_FileDescriptor

static GPBFileDescriptor *ChangeGroupMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ChangeGroupReq

@implementation ChangeGroupReq

@dynamic hasGroupId, groupId;
@dynamic hasChangeType, changeType;
@dynamic userIdArray, userIdArray_Count;
@dynamic hasGroupName, groupName;

typedef struct ChangeGroupReq__storage_ {
  uint32_t _has_storage_[1];
  ChangeGroupReq_ChangeType changeType;
  NSString *groupId;
  NSMutableArray *userIdArray;
  NSString *groupName;
} ChangeGroupReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = ChangeGroupReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChangeGroupReq__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "changeType",
        .dataTypeSpecific.enumDescFunc = ChangeGroupReq_ChangeType_EnumDescriptor,
        .number = ChangeGroupReq_FieldNumber_ChangeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChangeGroupReq__storage_, changeType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userIdArray",
        .dataTypeSpecific.className = NULL,
        .number = ChangeGroupReq_FieldNumber_UserIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChangeGroupReq__storage_, userIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupName",
        .dataTypeSpecific.className = NULL,
        .number = ChangeGroupReq_FieldNumber_GroupName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChangeGroupReq__storage_, groupName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChangeGroupReq class]
                                     rootClass:[ChangeGroupMsgRoot class]
                                          file:ChangeGroupMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChangeGroupReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\n\000\003\000userId\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ChangeGroupReq_ChangeType

GPBEnumDescriptor *ChangeGroupReq_ChangeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Add\000Delete\000UpdateInfo\000";
    static const int32_t values[] = {
        ChangeGroupReq_ChangeType_Add,
        ChangeGroupReq_ChangeType_Delete,
        ChangeGroupReq_ChangeType_UpdateInfo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChangeGroupReq_ChangeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChangeGroupReq_ChangeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChangeGroupReq_ChangeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChangeGroupReq_ChangeType_Add:
    case ChangeGroupReq_ChangeType_Delete:
    case ChangeGroupReq_ChangeType_UpdateInfo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChangeGroupRsp

@implementation ChangeGroupRsp

@dynamic hasResultCode, resultCode;

typedef struct ChangeGroupRsp__storage_ {
  uint32_t _has_storage_[1];
  ChangeGroupRsp_ResultCode resultCode;
} ChangeGroupRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = ChangeGroupRsp_ResultCode_EnumDescriptor,
        .number = ChangeGroupRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChangeGroupRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChangeGroupRsp class]
                                     rootClass:[ChangeGroupMsgRoot class]
                                          file:ChangeGroupMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChangeGroupRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ChangeGroupRsp_ResultCode

GPBEnumDescriptor *ChangeGroupRsp_ResultCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Fail\000NoAuthority\000";
    static const int32_t values[] = {
        ChangeGroupRsp_ResultCode_Success,
        ChangeGroupRsp_ResultCode_Fail,
        ChangeGroupRsp_ResultCode_NoAuthority,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChangeGroupRsp_ResultCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChangeGroupRsp_ResultCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChangeGroupRsp_ResultCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChangeGroupRsp_ResultCode_Success:
    case ChangeGroupRsp_ResultCode_Fail:
    case ChangeGroupRsp_ResultCode_NoAuthority:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChangeGroupSync

@implementation ChangeGroupSync

@dynamic hasGroupItem, groupItem;

typedef struct ChangeGroupSync__storage_ {
  uint32_t _has_storage_[1];
  GroupItem *groupItem;
} ChangeGroupSync__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupItem",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupItem),
        .number = ChangeGroupSync_FieldNumber_GroupItem,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChangeGroupSync__storage_, groupItem),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChangeGroupSync class]
                                     rootClass:[ChangeGroupMsgRoot class]
                                          file:ChangeGroupMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChangeGroupSync__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

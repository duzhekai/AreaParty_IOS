// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddFileMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "AddFileMsg.pbobjc.h"
 #import "FileData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AddFileMsgRoot

@implementation AddFileMsgRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AddFileMsgRoot_FileDescriptor

static GPBFileDescriptor *AddFileMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - AddFileReq

@implementation AddFileReq

@dynamic hasFileId, fileId;
@dynamic hasFileName, fileName;
@dynamic hasFileInfo, fileInfo;
@dynamic hasFileSize, fileSize;
@dynamic hasFileDate, fileDate;
@dynamic hasUserId, userId;
@dynamic hasFileURL, fileURL;
@dynamic hasFilePwd, filePwd;

typedef struct AddFileReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t fileId;
  NSString *fileName;
  NSString *fileInfo;
  NSString *fileSize;
  NSString *fileDate;
  NSString *userId;
  NSString *fileURL;
  NSString *filePwd;
} AddFileReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileInfo",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileDate",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_UserId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileURL",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FileURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, fileURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filePwd",
        .dataTypeSpecific.className = NULL,
        .number = AddFileReq_FieldNumber_FilePwd,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddFileReq__storage_, filePwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddFileReq class]
                                     rootClass:[AddFileMsgRoot class]
                                          file:AddFileMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddFileReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\006\000\002\010\000\003\010\000\004\010\000\005\010\000\006\006\000\007\005!!\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddFileRsp

@implementation AddFileRsp

@dynamic hasResultCode, resultCode;
@dynamic hasFileName, fileName;
@dynamic hasFileInfo, fileInfo;
@dynamic hasFileSize, fileSize;
@dynamic hasFileDate, fileDate;

typedef struct AddFileRsp__storage_ {
  uint32_t _has_storage_[1];
  AddFileRsp_ResultCode resultCode;
  NSString *fileName;
  NSString *fileInfo;
  NSString *fileSize;
  NSString *fileDate;
} AddFileRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = AddFileRsp_ResultCode_EnumDescriptor,
        .number = AddFileRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddFileRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = AddFileRsp_FieldNumber_FileName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddFileRsp__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileInfo",
        .dataTypeSpecific.className = NULL,
        .number = AddFileRsp_FieldNumber_FileInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddFileRsp__storage_, fileInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.className = NULL,
        .number = AddFileRsp_FieldNumber_FileSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddFileRsp__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileDate",
        .dataTypeSpecific.className = NULL,
        .number = AddFileRsp_FieldNumber_FileDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddFileRsp__storage_, fileDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddFileRsp class]
                                     rootClass:[AddFileMsgRoot class]
                                          file:AddFileMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddFileRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\002\010\000\003\010\000\004\010\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum AddFileRsp_ResultCode

GPBEnumDescriptor *AddFileRsp_ResultCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Fail\000";
    static const int32_t values[] = {
        AddFileRsp_ResultCode_Success,
        AddFileRsp_ResultCode_Fail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AddFileRsp_ResultCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AddFileRsp_ResultCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AddFileRsp_ResultCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case AddFileRsp_ResultCode_Success:
    case AddFileRsp_ResultCode_Fail:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

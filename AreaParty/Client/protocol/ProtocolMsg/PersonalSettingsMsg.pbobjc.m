// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersonalSettingsMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PersonalSettingsMsg.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PersonalSettingsMsgRoot

@implementation PersonalSettingsMsgRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PersonalSettingsMsgRoot_FileDescriptor

static GPBFileDescriptor *PersonalSettingsMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PersonalSettingsReq

@implementation PersonalSettingsReq

@dynamic hasUserName, userName;
@dynamic hasUserPassword, userPassword;
@dynamic hasHeadIndex, headIndex;
@dynamic hasCode, code;
@dynamic hasUserOldPassword, userOldPassword;
@dynamic hasUserAddress, userAddress;
@dynamic hasUserStreet, userStreet;
@dynamic hasUserCommunity, userCommunity;
@dynamic hasUserMainMac, userMainMac;
@dynamic hasUserId, userId;

typedef struct PersonalSettingsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t headIndex;
  int32_t code;
  NSString *userName;
  NSString *userPassword;
  NSString *userOldPassword;
  NSString *userAddress;
  NSString *userStreet;
  NSString *userCommunity;
  NSString *userMainMac;
  NSString *userId;
} PersonalSettingsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userPassword",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserPassword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headIndex",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_HeadIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, headIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_Code,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userOldPassword",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserOldPassword,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userOldPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userAddress",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserAddress,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userStreet",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserStreet,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userCommunity",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserCommunity,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userCommunity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMainMac",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserMainMac,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userMainMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PersonalSettingsReq_FieldNumber_UserId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PersonalSettingsReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PersonalSettingsReq class]
                                     rootClass:[PersonalSettingsMsgRoot class]
                                          file:PersonalSettingsMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PersonalSettingsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\010\000\002\014\000\003\t\000\005\017\000\006\013\000\007\n\000\010\r\000\t\013\000\n\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PersonalSettingsRsp

@implementation PersonalSettingsRsp

@dynamic hasResultCode, resultCode;
@dynamic hasChangeType, changeType;

typedef struct PersonalSettingsRsp__storage_ {
  uint32_t _has_storage_[1];
  PersonalSettingsRsp_ResultCode resultCode;
  PersonalSettingsRsp_ChangeType changeType;
} PersonalSettingsRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = PersonalSettingsRsp_ResultCode_EnumDescriptor,
        .number = PersonalSettingsRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PersonalSettingsRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "changeType",
        .dataTypeSpecific.enumDescFunc = PersonalSettingsRsp_ChangeType_EnumDescriptor,
        .number = PersonalSettingsRsp_FieldNumber_ChangeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PersonalSettingsRsp__storage_, changeType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PersonalSettingsRsp class]
                                     rootClass:[PersonalSettingsMsgRoot class]
                                          file:PersonalSettingsMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PersonalSettingsRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PersonalSettingsRsp_ResultCode

GPBEnumDescriptor *PersonalSettingsRsp_ResultCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Fail\000Oldpasswordwrong\000Codewrong\000";
    static const int32_t values[] = {
        PersonalSettingsRsp_ResultCode_Success,
        PersonalSettingsRsp_ResultCode_Fail,
        PersonalSettingsRsp_ResultCode_Oldpasswordwrong,
        PersonalSettingsRsp_ResultCode_Codewrong,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PersonalSettingsRsp_ResultCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PersonalSettingsRsp_ResultCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PersonalSettingsRsp_ResultCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PersonalSettingsRsp_ResultCode_Success:
    case PersonalSettingsRsp_ResultCode_Fail:
    case PersonalSettingsRsp_ResultCode_Oldpasswordwrong:
    case PersonalSettingsRsp_ResultCode_Codewrong:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PersonalSettingsRsp_ChangeType

GPBEnumDescriptor *PersonalSettingsRsp_ChangeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Name\000Password\000Address\000Mainmac\000";
    static const int32_t values[] = {
        PersonalSettingsRsp_ChangeType_Name,
        PersonalSettingsRsp_ChangeType_Password,
        PersonalSettingsRsp_ChangeType_Address,
        PersonalSettingsRsp_ChangeType_Mainmac,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PersonalSettingsRsp_ChangeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PersonalSettingsRsp_ChangeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PersonalSettingsRsp_ChangeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PersonalSettingsRsp_ChangeType_Name:
    case PersonalSettingsRsp_ChangeType_Password:
    case PersonalSettingsRsp_ChangeType_Address:
    case PersonalSettingsRsp_ChangeType_Mainmac:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

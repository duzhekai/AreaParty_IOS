// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "LoginMsg.pbobjc.h"
 #import "UserData.pbobjc.h"
 #import "ChatData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LoginMsgRoot

@implementation LoginMsgRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LoginMsgRoot_FileDescriptor

static GPBFileDescriptor *LoginMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LoginReq

@implementation LoginReq

@dynamic hasUserId, userId;
@dynamic hasUserPassword, userPassword;
@dynamic hasLoginType, loginType;
@dynamic hasUserMac, userMac;
@dynamic hasMobileInfo, mobileInfo;

typedef struct LoginReq__storage_ {
  uint32_t _has_storage_[1];
  LoginReq_LoginType loginType;
  NSString *userId;
  NSString *userPassword;
  NSString *userMac;
  NSString *mobileInfo;
} LoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userPassword",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_UserPassword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginReq__storage_, userPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loginType",
        .dataTypeSpecific.enumDescFunc = LoginReq_LoginType_EnumDescriptor,
        .number = LoginReq_FieldNumber_LoginType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginReq__storage_, loginType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userMac",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_UserMac,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginReq__storage_, userMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileInfo",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_MobileInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginReq__storage_, mobileInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginReq class]
                                     rootClass:[LoginMsgRoot class]
                                          file:LoginMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\002\014\000\003\t\000\004\007\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum LoginReq_LoginType

GPBEnumDescriptor *LoginReq_LoginType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Mobile\000Pc\000";
    static const int32_t values[] = {
        LoginReq_LoginType_Mobile,
        LoginReq_LoginType_Pc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LoginReq_LoginType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LoginReq_LoginType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LoginReq_LoginType_IsValidValue(int32_t value__) {
  switch (value__) {
    case LoginReq_LoginType_Mobile:
    case LoginReq_LoginType_Pc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LoginRsp

@implementation LoginRsp

@dynamic hasResultCode, resultCode;
@dynamic userItemArray, userItemArray_Count;
@dynamic chatItemArray, chatItemArray_Count;
@dynamic hasUserMac, userMac;
@dynamic hasMainMobileCode, mainMobileCode;

typedef struct LoginRsp__storage_ {
  uint32_t _has_storage_[1];
  LoginRsp_ResultCode resultCode;
  LoginRsp_MainMobileCode mainMobileCode;
  NSMutableArray *userItemArray;
  NSMutableArray *chatItemArray;
  NSString *userMac;
} LoginRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = LoginRsp_ResultCode_EnumDescriptor,
        .number = LoginRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserItem),
        .number = LoginRsp_FieldNumber_UserItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, userItemArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatItem),
        .number = LoginRsp_FieldNumber_ChatItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, chatItemArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userMac",
        .dataTypeSpecific.className = NULL,
        .number = LoginRsp_FieldNumber_UserMac,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, userMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mainMobileCode",
        .dataTypeSpecific.enumDescFunc = LoginRsp_MainMobileCode_EnumDescriptor,
        .number = LoginRsp_FieldNumber_MainMobileCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, mainMobileCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginRsp class]
                                     rootClass:[LoginMsgRoot class]
                                          file:LoginMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\002\000userItem\000\003\000chatItem\000\004\007\000\005\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum LoginRsp_ResultCode

GPBEnumDescriptor *LoginRsp_ResultCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Loggedin\000Fail\000Notmainphone\000Mainp"
        "honeoutline\000";
    static const int32_t values[] = {
        LoginRsp_ResultCode_Success,
        LoginRsp_ResultCode_Loggedin,
        LoginRsp_ResultCode_Fail,
        LoginRsp_ResultCode_Notmainphone,
        LoginRsp_ResultCode_Mainphoneoutline,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LoginRsp_ResultCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LoginRsp_ResultCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LoginRsp_ResultCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case LoginRsp_ResultCode_Success:
    case LoginRsp_ResultCode_Loggedin:
    case LoginRsp_ResultCode_Fail:
    case LoginRsp_ResultCode_Notmainphone:
    case LoginRsp_ResultCode_Mainphoneoutline:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum LoginRsp_MainMobileCode

GPBEnumDescriptor *LoginRsp_MainMobileCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Yes\000No\000";
    static const int32_t values[] = {
        LoginRsp_MainMobileCode_Yes,
        LoginRsp_MainMobileCode_No,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LoginRsp_MainMobileCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LoginRsp_MainMobileCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LoginRsp_MainMobileCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case LoginRsp_MainMobileCode_Yes:
    case LoginRsp_MainMobileCode_No:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccreditMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum AccreditReq_Type

typedef GPB_ENUM(AccreditReq_Type) {
  AccreditReq_Type_Agree = 0,
  AccreditReq_Type_Disagree = 1,
  AccreditReq_Type_Require = 2,

  /** 仅此一次 */
  AccreditReq_Type_Onlyonetime = 3,
};

GPBEnumDescriptor *AccreditReq_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AccreditReq_Type_IsValidValue(int32_t value);

#pragma mark - Enum AccreditReq_DeviceType

typedef GPB_ENUM(AccreditReq_DeviceType) {
  AccreditReq_DeviceType_Mobile = 0,
  AccreditReq_DeviceType_Pc = 1,
};

GPBEnumDescriptor *AccreditReq_DeviceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AccreditReq_DeviceType_IsValidValue(int32_t value);

#pragma mark - Enum AccreditRsp_ResultCode

typedef GPB_ENUM(AccreditRsp_ResultCode) {
  AccreditRsp_ResultCode_Success = 0,
  AccreditRsp_ResultCode_Fail = 1,
  AccreditRsp_ResultCode_Responscode = 2,
  AccreditRsp_ResultCode_Canlogin = 3,
};

GPBEnumDescriptor *AccreditRsp_ResultCode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AccreditRsp_ResultCode_IsValidValue(int32_t value);

#pragma mark - AccreditMsgRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface AccreditMsgRoot : GPBRootObject
@end

#pragma mark - AccreditReq

typedef GPB_ENUM(AccreditReq_FieldNumber) {
  AccreditReq_FieldNumber_AccreditCode = 1,
  AccreditReq_FieldNumber_AccreditMac = 2,
  AccreditReq_FieldNumber_Type = 3,
  AccreditReq_FieldNumber_UserId = 4,
  AccreditReq_FieldNumber_DeviceType = 5,
};

@interface AccreditReq : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *accreditCode;
/** Test to see if @c accreditCode has been set. */
@property(nonatomic, readwrite) BOOL hasAccreditCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *accreditMac;
/** Test to see if @c accreditMac has been set. */
@property(nonatomic, readwrite) BOOL hasAccreditMac;

@property(nonatomic, readwrite) AccreditReq_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;
/** Test to see if @c userId has been set. */
@property(nonatomic, readwrite) BOOL hasUserId;

@property(nonatomic, readwrite) AccreditReq_DeviceType deviceType;

@property(nonatomic, readwrite) BOOL hasDeviceType;
@end

#pragma mark - AccreditRsp

typedef GPB_ENUM(AccreditRsp_FieldNumber) {
  AccreditRsp_FieldNumber_ResultCode = 1,
};

@interface AccreditRsp : GPBMessage

@property(nonatomic, readwrite) AccreditRsp_ResultCode resultCode;

@property(nonatomic, readwrite) BOOL hasResultCode;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
